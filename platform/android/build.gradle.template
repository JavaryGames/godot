apply from: 'config.gradle'

buildscript {
	apply from: 'config.gradle'
	repositories {
		google()
		jcenter()
		$$GRADLE_REPOSITORY_URLS$$
	}
	dependencies {
		classpath libraries.androidGradlePlugin
		$$GRADLE_CLASSPATH$$
	}
}

apply plugin: 'com.android.application'

allprojects {
    repositories {
	mavenCentral()
	google()
	jcenter()
	$$GRADLE_REPOSITORY_URLS$$
    }
}

dependencies {
	implementation libraries.supportCoreUtils

    if (rootProject.findProject(":lib")) {
        implementation project(":lib")
    } else {
        // Custom build mode. In this scenario this project is the only one around and the Godot
        // library is available through the pre-generated godot-lib.*.aar android archive files.
        debugImplementation fileTree(dir: 'libs/debug', include: ['*.jar', '*.aar'])
        releaseImplementation fileTree(dir: 'libs/release', include: ['*.jar', '*.aar'])
    }
	$$GRADLE_DEPENDENCIES$$
}

android {
	compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        // Feel free to modify the application id to your own.
        $$GRADLE_DEFAULT_CONFIG$$
	}

	lintOptions {
		abortOnError false
		disable 'MissingTranslation','UnusedResources'
	}

	useLibrary 'org.apache.http.legacy'

	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/proguard/androidx-annotations.pro'
		doNotStrip "*/arm64-v8a/*.so"
		doNotStrip "*/armeabi-v7a/*.so"
		doNotStrip "*/x86/*.so"
		doNotStrip "*/x86_64/*.so"
	}
	// Both signing and zip-aligning will be done at export time
	buildTypes.all { buildType ->
		buildType.zipAlignEnabled false
		buildType.signingConfig null
	}
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src'
				$$GRADLE_JAVA_DIRS$$
			]
			res.srcDirs = [
				'res'
				$$GRADLE_RES_DIRS$$
			]
			aidl.srcDirs = [
				'aidl'
				$$GRADLE_AIDL_DIRS$$
			]
			assets.srcDirs = [
				'assets'
				$$GRADLE_ASSET_DIRS$$
			]
		}
		debug.jniLibs.srcDirs = [
			'libs/debug'
			$$GRADLE_JNI_DIRS$$
		]
		release.jniLibs.srcDirs = [
			'libs/release'
			$$GRADLE_JNI_DIRS$$
		]
	}

	applicationVariants.all { variant ->
		variant.outputs.all { output ->
			output.outputFileName = "android_${variant.name}.apk"
		}
	}
}

$$GRADLE_PLUGINS$$

$$GRADLE_CONTENT$$
